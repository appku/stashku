///<reference path="./modeling.d.js" />
/**
 * The base class for for all models.
 * This class is generated *once* unless you perform a forced OPTIONS export over it.
 * You can add customizations to this class to customize the model behavior throughout all extending classes.
 * @type {Modeling.AnyModel}
 */
class Model {
    /**
     * @inheritdoc
     */
    constructor() { }

    /**
     * The StashKu resource configuration for this model.
     * @type {Modeling.Configuration}
     */
    static get $stashku() {
        throw new Error(`The "$stashku" property must be overridden in the model "${this?.constructor?.name}".`);
    }

    validate() {
        //build initial results using all static keys
        let validationResults = {};
        let modelType = this.constructor;
        while (modelType) {
            let descriptors = Object.getOwnPropertyDescriptors(modelType);
            for (let prop in descriptors) {
                if (/^([$_].+|prototype|name)$/.test(prop) === false) {
                    let inputType = typeof modelType[prop];
                    if (inputType === 'string' || inputType === 'object') {
                        validationResults[prop] = null;
                    }
                }
            }
            let proto = Object.getPrototypeOf(modelType);
            if (proto && proto.name && proto.prototype !== undefined) {
                modelType = proto;
            } else {
                modelType = null;
            }
        }
        //run validations
        let validations = this.constructor?.$stashku?.validations;
        let isValid = true;
        if (typeof validations === 'object') {
            for (let k in validations) {
                let v = validations[k];
                let res = null;
                if (Array.isArray(v)) {
                    for (let func of v) {
                        //we expect the function to return a string error message (truthy) if the validation fails.
                        res = func.call(this, this, k, this[k]);
                        if (res) {
                            break;
                        }
                    }
                } else {
                    res = v.call(this, this, k, this[k]);
                }
                if (res) {
                    isValid = false;
                }
                validationResults[k] = res ?? null; //ensure null instead of undefined
            }
        }
        validationResults.valid = isValid;
        return validationResults;
    }
    
}

export default Model;
